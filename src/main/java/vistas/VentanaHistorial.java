/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import controladores.ControladorHistorial;
import controladores.MascotaControlador;
import dto.DtoConsulta;
import dto.DtoConsultaBase;
import dto.DtoMascota;
import dto.DtoVacuna;
import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.EXIT_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import controladores.ControladorConsultaBase;

/**
 *
 * @author Kevin
 */
public class VentanaHistorial extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(VentanaHistorial.class.getName());
    private VentanaServicios ventanaServicios;
    private MascotaControlador controladorMascota;
    private ControladorConsultaBase controladorConsultaBase;
    private ControladorHistorial controladorHistorial;
    /**
     * Creates new form VentanaHistorial
     */
    public VentanaHistorial(VentanaServicios ventanaServicios, MascotaControlador controladorMascota,ControladorConsultaBase controladorConsultaBase) {
        this.ventanaServicios = ventanaServicios;
        this.controladorMascota = controladorMascota;
        this.controladorConsultaBase = controladorConsultaBase; 
        this.controladorHistorial = new ControladorHistorial();
        initComponents();
         setTitle("Historial de Mascotas");
        setLocationRelativeTo(this);
        setLayout(new BorderLayout());
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }
   
public void ListarHistorial(int id) {
     DefaultTableModel modelo = new DefaultTableModel();
    modelo.setColumnIdentifiers(new Object[] {
        "Fecha", "Código","Id Mascota","Nombre Mascota", "Documento Propietario","Tipo","Veterinario", "Especialidad","Diagnostico","Tratamiento", "Tipo Vacuna", "Próxima Dosis"
    });
//ID mascota","Nombre","Tipo", "Fecha", "Diagnostico", "Tratamiento","Vacuna", "Dosis", "Veterinario"
 //   ControladorHistorial controladorHistorial = new ControladorHistorial();
    ArrayList<DtoConsultaBase> historial = controladorHistorial.obtenerHistorial(id);
    DtoMascota mascota = controladorHistorial.obtenerMascota(id); // Obtener la mascota

    String nombreMascota = "";
    String propietarioMascota = "";
    if (mascota != null) {
        nombreMascota = mascota.getNombre();
        propietarioMascota = mascota.getDocumentoPropietario();
    }

    for (DtoConsultaBase atencion : historial) {
        String tipo = "";
        String diagnostico = "";
        String tratamiento = "";
        String tipoVacuna = "";
        String proximaDosis = "";
        String veterinario = "";
        String veterinarioesp = "";
        String codigo = "";

        if (atencion instanceof  DtoConsulta consulta) {
            tipo = "Consulta";
            codigo = consulta.getCodigo();
            diagnostico = consulta.getDiagnostico();
            tratamiento = consulta.getTratamiento();
            veterinario = consulta.getVeterinario().getNombre();
            veterinarioesp = consulta.getVeterinario().getEspecialidad();
        } else if (atencion instanceof DtoVacuna vacuna) {
            tipo = "Vacuna";
            codigo = vacuna.getCodigo();
            tipoVacuna = vacuna.getTipo();
            proximaDosis = vacuna.getProximaDosis().toString();
        }

        modelo.addRow(new Object[] {
           atencion.getFecha(),
            codigo,
            atencion.getIdMas(),
            nombreMascota,
            propietarioMascota,
             tipo,
            veterinario,
            veterinarioesp,
            diagnostico,
            tratamiento,
            tipoVacuna,
            proximaDosis,
            
        });
    }
        tablaHistorial.setModel(modelo);

}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnMenu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaHistorial = new javax.swing.JTable();
        btnBuscarHistorial = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIdMasHistorial = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(202, 210, 197));

        jPanel2.setBackground(new java.awt.Color(132, 169, 140));

        btnMenu.setText("Menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Historial ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnMenu)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        tablaHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaHistorial);

        btnBuscarHistorial.setText("Buscar");
        btnBuscarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarHistorialActionPerformed(evt);
            }
        });

        jLabel1.setText("Id Mascota: ");

        txtIdMasHistorial.setText("  ");

        jButton1.setText("Mostrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1021, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(358, 358, 358)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtIdMasHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btnBuscarHistorial)
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdMasHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        this.setVisible(false);
        ventanaServicios.setVisible(true);
        
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnBuscarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarHistorialActionPerformed
        String input = txtIdMasHistorial.getText().trim();

        if (input.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor ingrese un ID de mascota.");
            return;
        }

        int id;
        try {
            id = Integer.parseInt(input);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "El ID debe ser un número válido.");
            return;
        }
        
        DtoMascota buscar = controladorMascota.buscarMascota(id);
        if(buscar != null){
        // Llama a tu método para llenar la tabla
        ListarHistorial(id);
        }else{
            JOptionPane.showMessageDialog(this, "Mascota sin historial, porfavor ingresa un Id valido.");
        }
    


    }//GEN-LAST:event_btnBuscarHistorialActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
   /* int fila = tablaHistorial.getSelectedRow();
    if(fila <= -1){
        JOptionPane.showMessageDialog(this, "Porfavor seleccione una Consulta para mostar El diagnostico y tratamiento.");
        return;
    }
    String codigo = tablaHistorial.getValueAt(fila, 1).toString().trim(); // asegúrate de eliminar espacios*/
  try {
    int idmas = Integer.parseInt(txtIdMasHistorial.getText().trim());

    ArrayList<DtoConsultaBase> historial = controladorHistorial.obtenerHistorial(idmas);

    if (historial == null || historial.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se encontró historial para la mascota con ID " + idmas);
        return;
    }

    for (DtoConsultaBase atencion : historial) {
        if (atencion instanceof DtoConsulta consulta) {
            String codigo = consulta.getCodigo();
            DtoConsultaBase buscar = controladorConsultaBase.buscarConsulta(codigo, DtoConsulta.class);

            if (buscar != null) {
                DtoConsulta nueva = (DtoConsulta) buscar;

                JOptionPane.showMessageDialog(
                    this,
                    "Diagnóstico de la mascota con ID " + nueva.getIdMas() + ":\n" + nueva.getDiagnostico() +
                    "\n\nTratamiento de la mascota con Id:" + nueva.getIdMas()+"\n" +nueva.getTratamiento(),
                    "Consulta: " + nueva.getCodigo(),
                    JOptionPane.INFORMATION_MESSAGE
                );
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró información para el código: " + codigo);
            }
        }
    }
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.");
}

    
    
    

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(() -> new VentanaHistorial().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarHistorial;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaHistorial;
    private javax.swing.JTextField txtIdMasHistorial;
    // End of variables declaration//GEN-END:variables
}
